// source: root.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.Token');
goog.provide('proto.Token.SubTypeCase');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

goog.forwardDeclare('proto.AnchorType');
goog.forwardDeclare('proto.CharacterClassType');
goog.forwardDeclare('proto.EscapeType');
goog.forwardDeclare('proto.FlagType');
goog.forwardDeclare('proto.GroupReferenceType');
goog.forwardDeclare('proto.LookaroundType');
goog.forwardDeclare('proto.QuantifierModifierType');
goog.forwardDeclare('proto.SubstitutionType');
goog.forwardDeclare('proto.TokenType');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Token = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Token.oneofGroups_);
};
goog.inherits(proto.Token, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Token.displayName = 'proto.Token';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Token.oneofGroups_ = [[10,11,12,13,14,15,16,17,18]];

/**
 * @enum {number}
 */
proto.Token.SubTypeCase = {
  SUB_TYPE_NOT_SET: 0,
  FLAG: 10,
  SUBSTITUTION: 11,
  QUANTIFIERMODIFIER: 12,
  ANCHOR: 13,
  CHARACTER: 14,
  LOOKAROUND: 15,
  ESCAPE: 16,
  GROUPREF: 17,
  CHARACTERCLASS: 18
};

/**
 * @return {proto.Token.SubTypeCase}
 */
proto.Token.prototype.getSubTypeCase = function() {
  return /** @type {proto.Token.SubTypeCase} */(jspb.Message.computeOneofCase(this, proto.Token.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Token.prototype.toObject = function(opt_includeInstance) {
  return proto.Token.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Token} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Token.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 8, ""),
    type: jspb.Message.getFieldWithDefault(msg, 9, 0),
    flag: jspb.Message.getFieldWithDefault(msg, 10, 0),
    substitution: jspb.Message.getFieldWithDefault(msg, 11, 0),
    quantifiermodifier: jspb.Message.getFieldWithDefault(msg, 12, 0),
    anchor: jspb.Message.getFieldWithDefault(msg, 13, 0),
    character: jspb.Message.getFieldWithDefault(msg, 14, ""),
    lookaround: jspb.Message.getFieldWithDefault(msg, 15, 0),
    escape: jspb.Message.getFieldWithDefault(msg, 16, 0),
    groupref: jspb.Message.getFieldWithDefault(msg, 17, 0),
    characterclass: jspb.Message.getFieldWithDefault(msg, 18, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Token}
 */
proto.Token.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Token;
  return proto.Token.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Token} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Token}
 */
proto.Token.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 9:
      var value = /** @type {!proto.TokenType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 10:
      var value = /** @type {!proto.FlagType} */ (reader.readEnum());
      msg.setFlag(value);
      break;
    case 11:
      var value = /** @type {!proto.SubstitutionType} */ (reader.readEnum());
      msg.setSubstitution(value);
      break;
    case 12:
      var value = /** @type {!proto.QuantifierModifierType} */ (reader.readEnum());
      msg.setQuantifiermodifier(value);
      break;
    case 13:
      var value = /** @type {!proto.AnchorType} */ (reader.readEnum());
      msg.setAnchor(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacter(value);
      break;
    case 15:
      var value = /** @type {!proto.LookaroundType} */ (reader.readEnum());
      msg.setLookaround(value);
      break;
    case 16:
      var value = /** @type {!proto.EscapeType} */ (reader.readEnum());
      msg.setEscape(value);
      break;
    case 17:
      var value = /** @type {!proto.GroupReferenceType} */ (reader.readEnum());
      msg.setGroupref(value);
      break;
    case 18:
      var value = /** @type {!proto.CharacterClassType} */ (reader.readEnum());
      msg.setCharacterclass(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Token.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Token.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Token} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Token.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = /** @type {!proto.FlagType} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = /** @type {!proto.SubstitutionType} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = /** @type {!proto.QuantifierModifierType} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = /** @type {!proto.AnchorType} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
  f = /** @type {!proto.LookaroundType} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = /** @type {!proto.EscapeType} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = /** @type {!proto.GroupReferenceType} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = /** @type {!proto.CharacterClassType} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeEnum(
      18,
      f
    );
  }
};


/**
 * optional string token = 8;
 * @return {string}
 */
proto.Token.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional TokenType type = 9;
 * @return {!proto.TokenType}
 */
proto.Token.prototype.getType = function() {
  return /** @type {!proto.TokenType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.TokenType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional FlagType flag = 10;
 * @return {!proto.FlagType}
 */
proto.Token.prototype.getFlag = function() {
  return /** @type {!proto.FlagType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.FlagType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setFlag = function(value) {
  return jspb.Message.setOneofField(this, 10, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearFlag = function() {
  return jspb.Message.setOneofField(this, 10, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasFlag = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional SubstitutionType substitution = 11;
 * @return {!proto.SubstitutionType}
 */
proto.Token.prototype.getSubstitution = function() {
  return /** @type {!proto.SubstitutionType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.SubstitutionType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setSubstitution = function(value) {
  return jspb.Message.setOneofField(this, 11, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearSubstitution = function() {
  return jspb.Message.setOneofField(this, 11, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasSubstitution = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional QuantifierModifierType quantifiermodifier = 12;
 * @return {!proto.QuantifierModifierType}
 */
proto.Token.prototype.getQuantifiermodifier = function() {
  return /** @type {!proto.QuantifierModifierType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.QuantifierModifierType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setQuantifiermodifier = function(value) {
  return jspb.Message.setOneofField(this, 12, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearQuantifiermodifier = function() {
  return jspb.Message.setOneofField(this, 12, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasQuantifiermodifier = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional AnchorType anchor = 13;
 * @return {!proto.AnchorType}
 */
proto.Token.prototype.getAnchor = function() {
  return /** @type {!proto.AnchorType} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.AnchorType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setAnchor = function(value) {
  return jspb.Message.setOneofField(this, 13, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearAnchor = function() {
  return jspb.Message.setOneofField(this, 13, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasAnchor = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string character = 14;
 * @return {string}
 */
proto.Token.prototype.getCharacter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setCharacter = function(value) {
  return jspb.Message.setOneofField(this, 14, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearCharacter = function() {
  return jspb.Message.setOneofField(this, 14, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasCharacter = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional LookaroundType lookaround = 15;
 * @return {!proto.LookaroundType}
 */
proto.Token.prototype.getLookaround = function() {
  return /** @type {!proto.LookaroundType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.LookaroundType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setLookaround = function(value) {
  return jspb.Message.setOneofField(this, 15, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearLookaround = function() {
  return jspb.Message.setOneofField(this, 15, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasLookaround = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional EscapeType escape = 16;
 * @return {!proto.EscapeType}
 */
proto.Token.prototype.getEscape = function() {
  return /** @type {!proto.EscapeType} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.EscapeType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setEscape = function(value) {
  return jspb.Message.setOneofField(this, 16, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearEscape = function() {
  return jspb.Message.setOneofField(this, 16, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasEscape = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional GroupReferenceType groupref = 17;
 * @return {!proto.GroupReferenceType}
 */
proto.Token.prototype.getGroupref = function() {
  return /** @type {!proto.GroupReferenceType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {!proto.GroupReferenceType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setGroupref = function(value) {
  return jspb.Message.setOneofField(this, 17, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearGroupref = function() {
  return jspb.Message.setOneofField(this, 17, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasGroupref = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional CharacterClassType characterclass = 18;
 * @return {!proto.CharacterClassType}
 */
proto.Token.prototype.getCharacterclass = function() {
  return /** @type {!proto.CharacterClassType} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {!proto.CharacterClassType} value
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.setCharacterclass = function(value) {
  return jspb.Message.setOneofField(this, 18, proto.Token.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Token} returns this
 */
proto.Token.prototype.clearCharacterclass = function() {
  return jspb.Message.setOneofField(this, 18, proto.Token.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Token.prototype.hasCharacterclass = function() {
  return jspb.Message.getField(this, 18) != null;
};


